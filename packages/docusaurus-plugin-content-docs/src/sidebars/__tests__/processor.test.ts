/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import {processSidebars, type SidebarProcessorParams} from '../processor';
import type {
  SidebarItem,
  SidebarItemsGenerator,
  Sidebars,
  NormalizedSidebars,
} from '../types';
import {DefaultSidebarItemsGenerator} from '../generator';
import {createSlugger} from '@docusaurus/utils';
import type {VersionMetadata} from '../../types';
import {DefaultNumberPrefixParser} from '../../numberPrefix';
import {isCategoryIndex} from '../../docs';

describe('processSidebars', () => {
  function createStaticSidebarItemGenerator(
    sidebarSlice: SidebarItem[],
  ): SidebarItemsGenerator {
    return jest.fn(async () => sidebarSlice);
  }

  const StaticGeneratedSidebarSlice: SidebarItem[] = [
    {type: 'doc', id: 'doc-generated-id-1'},
    {type: 'doc', id: 'doc-generated-id-2'},
  ];

  const StaticSidebarItemsGenerator: SidebarItemsGenerator =
    createStaticSidebarItemGenerator(StaticGeneratedSidebarSlice);

  // @ts-expect-error: good enough for this test
  const version: VersionMetadata = {
    versionName: '1.0.0',
    versionPath: '/docs/1.0.0',
  };

  const params: SidebarProcessorParams = {
    sidebarItemsGenerator: StaticSidebarItemsGenerator,
    docs: [],
    version,
    numberPrefixParser: DefaultNumberPrefixParser,
    categoryLabelSlugger: createSlugger(),
    sidebarOptions: {
      sidebarCollapsed: true,
      sidebarCollapsible: true,
    },
  };

  async function testProcessSidebars(
    unprocessedSidebars: NormalizedSidebars,
    paramsOverrides: Partial<SidebarProcessorParams> = {},
  ) {
    return processSidebars(unprocessedSidebars, {
      ...params,
      ...paramsOverrides,
    });
  }

  test('let sidebars without autogenerated items untouched', async () => {
    const unprocessedSidebars: NormalizedSidebars = {
      someSidebar: [
        {type: 'doc', id: 'doc1'},
        {
          type: 'category',
          collapsed: false,
          collapsible: true,
          items: [{type: 'doc', id: 'doc2'}],
          label: 'Category',
        },
        {type: 'link', href: 'https://facebook.com', label: 'FB'},
      ],
      secondSidebar: [
        {type: 'doc', id: 'doc3'},
        {type: 'link', href: 'https://instagram.com', label: 'IG'},
        {
          type: 'category',
          collapsed: false,
          collapsible: true,
          items: [{type: 'doc', id: 'doc4'}],
          label: 'Category',
        },
      ],
    };

    const processedSidebar = await testProcessSidebars(unprocessedSidebars);
    expect(processedSidebar).toEqual(unprocessedSidebars);
  });

  test('replace autogenerated items by generated sidebars slices', async () => {
    const unprocessedSidebars: NormalizedSidebars = {
      someSidebar: [
        {type: 'doc', id: 'doc1'},
        {
          type: 'category',
          label: 'Category',
          link: {
            type: 'generated-index',
            slug: 'category-generated-index-slug',
            permalink: 'category-generated-index-permalink',
          },
          collapsed: true, // A suspicious bad config that will be normalized
          collapsible: false,
          items: [
            {type: 'doc', id: 'doc2'},
            {type: 'autogenerated', dirName: 'dir1'},
          ],
        },
        {type: 'link', href: 'https://facebook.com', label: 'FB'},
      ],
      secondSidebar: [
        {type: 'doc', id: 'doc3'},
        {type: 'autogenerated', dirName: 'dir2'},
        {type: 'link', href: 'https://instagram.com', label: 'IG'},
        {type: 'autogenerated', dirName: 'dir3'},
        {
          type: 'category',
          label: 'Category',
          collapsed: false,
          collapsible: true,
          items: [{type: 'doc', id: 'doc4'}],
        },
      ],
    };

    const processedSidebar = await testProcessSidebars(unprocessedSidebars);

    expect(StaticSidebarItemsGenerator).toHaveBeenCalledTimes(3);
    expect(StaticSidebarItemsGenerator).toHaveBeenCalledWith({
      defaultSidebarItemsGenerator: DefaultSidebarItemsGenerator,
      item: {type: 'autogenerated', dirName: 'dir1'},
      docs: params.docs,
      version: {
        versionName: version.versionName,
      },
      numberPrefixParser: DefaultNumberPrefixParser,
      isCategoryIndex,
      options: params.sidebarOptions,
    });
    expect(StaticSidebarItemsGenerator).toHaveBeenCalledWith({
      defaultSidebarItemsGenerator: DefaultSidebarItemsGenerator,
      item: {type: 'autogenerated', dirName: 'dir2'},
      docs: params.docs,
      version: {
        versionName: version.versionName,
      },
      numberPrefixParser: DefaultNumberPrefixParser,
      isCategoryIndex,
      options: params.sidebarOptions,
    });
    expect(StaticSidebarItemsGenerator).toHaveBeenCalledWith({
      defaultSidebarItemsGenerator: DefaultSidebarItemsGenerator,
      item: {type: 'autogenerated', dirName: 'dir3'},
      docs: params.docs,
      version: {
        versionName: version.versionName,
      },
      numberPrefixParser: DefaultNumberPrefixParser,
      isCategoryIndex,
      options: params.sidebarOptions,
    });

    expect(processedSidebar).toEqual({
      someSidebar: [
        {type: 'doc', id: 'doc1'},
        {
          type: 'category',
          label: 'Category',
          link: {
            type: 'generated-index',
            slug: 'category-generated-index-slug',
            permalink: 'category-generated-index-permalink',
          },
          collapsed: false,
          collapsible: false,
          items: [{type: 'doc', id: 'doc2'}, ...StaticGeneratedSidebarSlice],
        },
        {type: 'link', href: 'https://facebook.com', label: 'FB'},
      ],
      secondSidebar: [
        {type: 'doc', id: 'doc3'},
        ...StaticGeneratedSidebarSlice,
        {type: 'link', href: 'https://instagram.com', label: 'IG'},
        ...StaticGeneratedSidebarSlice,
        {
          type: 'category',
          label: 'Category',
          collapsed: false,
          collapsible: true,
          items: [{type: 'doc', id: 'doc4'}],
        },
      ],
    } as Sidebars);
  });

  test('ensure generated items are normalized', async () => {
    const sidebarSliceContainingCategoryGeneratedIndex: SidebarItem[] = [
      {
        type: 'category',
        label: 'Generated category',
        link: {
          type: 'generated-index',
          slug: 'generated-cat-index-slug',
          // @ts-expect-error: TODO undefined should be allowed here,
          // typing error needing refactor
          permalink: undefined,
        },
        items: [
          {
            type: 'doc',
            id: 'foo',
          },
        ],
      },
    ];

    const unprocessedSidebars: NormalizedSidebars = {
      someSidebar: [{type: 'autogenerated', dirName: 'dir2'}],
    };

    const processedSidebar = await testProcessSidebars(unprocessedSidebars, {
      sidebarItemsGenerator: createStaticSidebarItemGenerator(
        sidebarSliceContainingCategoryGeneratedIndex,
      ),
    });

    expect(processedSidebar).toEqual({
      someSidebar: [
        {
          type: 'category',
          label: 'Generated category',
          link: {
            type: 'generated-index',
            slug: 'generated-cat-index-slug',
            permalink: '/docs/1.0.0/generated-cat-index-slug',
          },
          items: [
            {
              type: 'doc',
              id: 'foo',
            },
          ],
          collapsible: true,
          collapsed: true,
        },
      ],
    } as Sidebars);
  });

  test('transforms category without subitems', async () => {
    const sidebarSlice: SidebarItem[] = [
      {
        type: 'category',
        label: 'Category',
        link: {
          type: 'generated-index',
          permalink: 'generated/permalink',
        },
        items: [],
      },
      {
        type: 'category',
        label: 'Category 2',
        link: {
          type: 'doc',
          id: 'doc ID',
        },
        items: [],
      },
    ];

    const processedSidebar = await testProcessSidebars(
      {sidebar: sidebarSlice},
      {},
    );

    expect(processedSidebar).toEqual({
      sidebar: [
        {
          type: 'link',
          label: 'Category',
          href: 'generated/permalink',
        },
        {
          type: 'doc',
          label: 'Category 2',
          id: 'doc ID',
        },
      ],
    } as Sidebars);

    await expect(async () => {
      await testProcessSidebars({
        sidebar: [
          {
            type: 'category',
            label: 'Bad category',
            items: [],
          },
        ],
      });
    }).rejects.toThrowErrorMatchingInlineSnapshot(
      `"Sidebar category Bad category has neither any subitem nor a link. This makes this item not able to link to anything."`,
    );
  });
});
